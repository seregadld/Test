version: "3.9"

services:
  # Redis - хранилище для очереди продуктов на одобрение
  redis:
    image: redis:6.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s
  # Kafka - брокер сообщений
  kafka:
    image: apache/kafka:3.8.0
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CLUSTER_ID: "5L6g3nShT-eMCtK--X86sw" # Cluster ID из логов
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - /var/lib/kafka/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server kafka:9092 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1GB

  topic_creator:
    image: apache/kafka:3.8.0
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      sh -c "/opt/kafka/bin/kafka-topics.sh --create --topic __consumer_offsets --partitions 50 --replication-factor 1 --bootstrap-server kafka:9092; "
    networks:
      - app_network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 9095:8080
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - app_network

  db_auth:
    image: postgres:12-bullseye
    container_name: postgres_auth_db
    environment:
      POSTGRES_USER: storage_admin # Задать пользователя
      POSTGRES_PASSWORD: THw7l0bxvPPkWUhP # Задать пароль
      POSTGRES_DB: strg_users_db # Задать имя БД
    ports:
      - "5435:5432" # Открыть порт для внешнего доступа
    volumes:
      - ./docker-data/auth_db:/var/lib/postgresql/data
      - ./auth_service/db_init/init.sql:/docker-entrypoint-initdb.d/init.sql # Путь к папке с SQL-скриптами
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

  db_products:
    image: postgres:12-bullseye
    container_name: postgres_products_db
    environment:
      POSTGRES_USER: storage_admin # Задать пользователя
      POSTGRES_PASSWORD: THw7l0bxvPPkWUhP # Задать пароль
      POSTGRES_DB: strg_products_db # Задать имя БД
    ports:
      - "5436:5432" # Открыть порт для внешнего доступа
    volumes:
      - ./docker-data/products_db:/var/lib/postgresql/data
      - ./products_service/db_init/init_products.sql:/docker-entrypoint-initdb.d/init.sql # Путь к папке с SQL-скриптами
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    volumes:
      - ./auth_service/logs:/app/logs
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://storage_admin:THw7l0bxvPPkWUhP@db:5432/strg_users_db
      REDIS_HOST: redis
    ports:
      - "8001:8000" # Открыть порт для FastAPI или другого веб-сервиса
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

  products_service:
    build:
      context: ./products_service
      dockerfile: Dockerfile
    container_name: products_service
    volumes:
      - ./products_service/logs:/app/logs
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://storage_admin:THw7l0bxvPPkWUhP@db_products:5432/strg_products_db
      REDIS_HOST: redis
    ports:
      - "8002:8000" # Открываем порт для сервиса продуктов
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512MB
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 20s

networks:
  app_network:
    driver: bridge
